import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "fire1", table_name = "glue_op_landing_zone1", transformation_ctx = "datasource0"]
## @return: datasource0
## @inputs: []
datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "fire1", table_name = "glue_op_landing_zone1", transformation_ctx = "datasource0")
## @type: ApplyMapping
## @args: [mapping = [("fire_year", "long", "fire_year", "long"), ("stat_cause_descr", "string", "stat_cause_descr", "string"), ("fire_size", "double", "fire_size", "double"), ("fire_size_class", "string", "fire_size_class", "string"), ("latitude", "double", "latitude", "double"), ("longitude", "double", "longitude", "double"), ("state", "string", "state", "string"), ("county", "long", "county", "long"), ("discovery_date", "double", "discovery_date", "double"), ("cont_date", "double", "cont_date", "double")], transformation_ctx = "applymapping1"]
## @return: applymapping1
## @inputs: [frame = datasource0]
applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("fire_year", "long", "fire_year", "long"), ("stat_cause_descr", "string", "stat_cause_descr", "string"), ("fire_size", "double", "fire_size", "double"), ("fire_size_class", "string", "fire_size_class", "string"), ("latitude", "double", "latitude", "double"), ("longitude", "double", "longitude", "double"), ("state", "string", "state", "string"), ("county", "long", "county", "long"), ("discovery_date", "double", "discovery_date", "double"), ("cont_date", "double", "cont_date", "double")], transformation_ctx = "applymapping1")
## @type: DataSink
## @args: [connection_type = "s3", connection_options = {"path": "s3://staging-area1/etl_output"}, format = "csv", transformation_ctx = "datasink2"]
## @return: datasink2
## @inputs: [frame = applymapping1]
datasink2 = glueContext.write_dynamic_frame.from_options(frame = applymapping1, connection_type = "s3", connection_options = {"path": "s3://staging-area1/etl_output"}, format = "csv", transformation_ctx = "datasink2")
job.commit()
